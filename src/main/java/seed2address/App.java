/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package seed2address;

import org.bitcoinj.core.Base58;
import org.bitcoinj.core.NetworkParameters;
import org.bitcoinj.params.MainNetParams;
import org.bitcoinj.core.ECKey;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Logger;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import java.security.MessageDigest;

import java.math.BigInteger;

public class App{
    /**
      * 将byte转为16进制
      * @param bytes
      * @return
     */
    private static String byte2Hex(byte[] bytes){
        StringBuffer stringBuffer = new StringBuffer();
        String temp = null;
         for (int i=0;i<bytes.length;i++){
             temp = Integer.toHexString(bytes[i] & 0xFF);
         if (temp.length()==1){
             stringBuffer.append("0");
         }
             stringBuffer.append(temp);
         }
         return stringBuffer.toString();
    }
    public static void main(String[] args){
        // NetworkParameters params = MainNetParams.get();
        // BigInteger priv = new BigInteger("1b9cdf53588f99cea61c6482c4549b0316bafde19f76851940d71babaec5e569", 16);
        // ECKey key = new ECKey(priv);
        // //PrivateKey privateKey = getPrivateKeyFromECBigIntAndCurve(priv, "secp256r1");
        // System.out.format("私钥 => %s\n", key.getPrivateKeyAsHex());
        // System.out.format("公钥 => %s\n", key.getPublicKeyAsHex());
        // System.out.format("地址 => %s\n", key.toAddress(params));
        try {
            byte[] wif = Base58.decode("L273HNzNDcU4WHkSqVEv8sRie3HdAAxkWzwgrNLNaCPcgKMW55Lu");
            NetworkParameters params = MainNetParams.get();
            String hexWif = Hex.encodeHexString(wif);
            System.out.format("Hexwif:%s\n", hexWif);
            Integer length = hexWif.length();
            String privateKey = hexWif.substring(2, length - 10);
            System.out.format("私钥:%s\n", privateKey);

            MessageDigest md;
            String seed = "foobar\n";
            //String privateKey = "";
             try {
                    md = MessageDigest.getInstance("SHA-256");
                    md.update(seed.getBytes("UTF-8"));
                    privateKey = byte2Hex(md.digest());
             } catch (NoSuchAlgorithmException e) {
                    e.printStackTrace();
             } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
             }
            ECKey eckey = ECKey.fromPrivate(Hex.decodeHex(privateKey.toCharArray()));
            //log.info("地址为{}", eckey.toAddress(params).toBase58());
            System.out.format("seed:%s\n",seed);
            System.out.format("private:%s\n",privateKey);
            System.out.format("address:%s\n",eckey.toAddress(params).toBase58());
        }catch (Exception e) {
            e.printStackTrace();
            System.out.format(e.getMessage());
            //log.error(e.getMessage());
        }

    }
}
